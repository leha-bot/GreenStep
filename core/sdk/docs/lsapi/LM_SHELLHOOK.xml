<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="lsapi.xslt"?>

<message>
  <name>LM_SHELLHOOK</name>
  <description>
    <p>
      <msg>LM_SHELLHOOK</msg> is not a message but refers to a group of related
      shell hook messages. See Remarks for a complete list.
    </p>
    <p>
      The LiteStep core sends <msg>LM_SHELLHOOK</msg> messages whenever it
      receives a <const>HSHELL</const> shell hook message from the system.
    </p>
  </description>
  <parameters>
    <parameter>
      <name>wParam</name>
      <description>
        The value depends on the shell hook message. See Remarks.
      </description>
      <type>WPARAM</type>
    </parameter>
    <parameter>
      <name>lParam</name>
      <description>
        This value is either <const>0</const> or <const>HSHELL_HIGHBIT</const>.
        The meaning depends on the shell hook message. See Remarks.
      </description>
      <type>LPARAM</type>
    </parameter>
  </parameters>
  <return>
    <description>
      The return value depends on the shell hook message. See Remarks.
    </description>
  </return>
  <remarks>
    <p>
      There are thirteen <msg>LM_SHELLHOOK</msg> messages that correspond to the
      various <const>HSHELL</const> messages. They are defined as follows:
      <blockcode>
        #define LM_WINDOWCREATED            (LM_SHELLHOOK + HSHELL_WINDOWCREATED)
        #define LM_WINDOWDESTROYED          (LM_SHELLHOOK + HSHELL_WINDOWDESTROYED)
        #define LM_ACTIVATESHELLWINDOW      (LM_SHELLHOOK + HSHELL_ACTIVATESHELLWINDOW)
        #define LM_WINDOWACTIVATED          (LM_SHELLHOOK + HSHELL_WINDOWACTIVATED)
        #define LM_GETMINRECT               (LM_SHELLHOOK + HSHELL_GETMINRECT)
        #define LM_REDRAW                   (LM_SHELLHOOK + HSHELL_REDRAW)
        #define LM_TASKMAN                  (LM_SHELLHOOK + HSHELL_TASKMAN)
        #define LM_LANGUAGE                 (LM_SHELLHOOK + HSHELL_LANGUAGE)
        #define LM_ACCESSIBILITYSTATE       (LM_SHELLHOOK + HSHELL_ACCESSIBILITYSTATE)
        #define LM_APPCOMMAND               (LM_SHELLHOOK + HSHELL_APPCOMMAND)
        #define LM_WINDOWREPLACED           (LM_SHELLHOOK + HSHELL_WINDOWREPLACED)
        #define LM_WINDOWREPLACING          (LM_SHELLHOOK + HSHELL_WINDOWREPLACING)
        #define LM_MONITORCHANGED           (LM_SHELLHOOK + HSHELL_MONITORCHANGED)
      </blockcode>      
    </p>
    <p>
      For the precise meaning of the individual <const>HSHELL</const> messages
      and their <param>wParam</param>, see the documentation of the
      <extfn>SetWindowsHookEx</extfn> / <extmsg>WH_SHELL</extmsg> hook.
    </p>
    <p>
      If <const>LM_WINDOWACTIVATED</const> is sent with <param>lParam</param>
      set to <const>HSHELL_HIGHBIT</const>, LiteStep has detected a full screen
      application window.
    </p>
    <p>
      If <const>LM_REDRAW</const> is sent with <param>lParam</param> set to
      <const>HSHELL_HIGHBIT</const>, LiteStep has detected a "flashing"
      application window.
    </p>
    <p>
      To receive any <msg>LM_SHELLHOOK</msg> message, modules need to register
      for them by using <msg>LM_REGISTERMESSAGE</msg>.
    </p>
  </remarks>
  <example>
<blockcode>HWND hModuleWindow = ...;
UINT uMessages[] = { LM_WINDOWCREATED, LM_WINDOWDESTROYED, LM_WINDOWACTIVATED, 0 };

SendMessage(GetLitestepWnd(), LM_REGISTERMESSAGE, (WPARAM)hModuleWindow, (LPARAM)&amp;uMessages);
</blockcode>
  </example>
  <see-also>
    <msg>LM_REGISTERMESSAGE</msg>
  </see-also>
</message>